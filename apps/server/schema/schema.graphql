"""Query Root"""
type Query {
  """Get the authenticated user"""
  me: User
}

type User {
  id: String!
  username: String!
}

type Mutation {
  """Validate password and return user's token"""
  login(input: LoginMutationInput!): LoginMutationPayload

  """Register user"""
  register(input: RegisterMutationInput!): RegisterMutationPayload

  """Store user's message"""
  storeMessage(input: StoreMessageInput!): StoreMessagePayload

  """Create Room"""
  createRoom(input: CreateRoomInput!): CreateRoomPayload
}

type LoginMutationPayload {
  token: String
  user: User
  clientMutationId: String
}

input LoginMutationInput {
  username: String!
  password: String!
  clientMutationId: String
}

type RegisterMutationPayload {
  token: String
  user: User
  clientMutationId: String
}

input RegisterMutationInput {
  username: String!
  password: String!
  clientMutationId: String
}

type StoreMessagePayload {
  message: Message
  clientMutationId: String
}

type Message {
  id: String!
  content: String!
  sender: User!
  sentAt: String!
}

input StoreMessageInput {
  content: String!
  room_id: ID!
  clientMutationId: String
}

type CreateRoomPayload {
  room: Room
  clientMutationId: String
}

type Room {
  id: String!
  participants: [User!]!
  messages: [Message!]!
  createdAt: String!
  updatedAt: String!
}

input CreateRoomInput {
  participants: [ID!]!
  clientMutationId: String
}